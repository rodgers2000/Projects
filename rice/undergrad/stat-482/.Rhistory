Brain = calculate_labels(Brain, label)
Brain = adjust_Y(Brain)
Brain = remove_NA_returns(Brain)
Brain = adjust_IDYX(Brain)
Brain = adjust_return_features(Brain)
Nucleus = the_machines_will_rule(Brain, n = 500)
save_accuracy_and_confusion_matrix(Nucleus, label)
cagr_df = get_cagrs(Nucleus)
write_csv(cagr_df, paste0(getwd(), "/Results/CAGRS/methods_", label, ".csv"))
cat(label, "\n")
}
library(tidyverse)
library(R.utils)
library(readr)
library(lubridate)
dat_UNIV = read_csv(paste0(getwd(), "/Data/UNIVERSE.csv"))
dat_RETURNS = read_csv(paste0(getwd(), "/Data/RETURNS.csv"))
sourceDirectory(paste0(getwd(), '/Functions/'))
sourceDirectory(paste0(getwd(), '/Models/'))
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS) # BRAIN is a list of tibbles, we pass this everywhere
### stop
# YOLO
Nucleus = the_machines_will_rule(Brain, n = 25)
library(tidyverse)
library(R.utils)
library(readr)
library(lubridate)
dat_UNIV = read_csv(paste0(getwd(), "/Data/UNIVERSE.csv"))
dat_RETURNS = read_csv(paste0(getwd(), "/Data/RETURNS.csv"))
sourceDirectory(paste0(getwd(), '/Functions/'))
sourceDirectory(paste0(getwd(), '/Models/'))
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS) # BRAIN is a list of tibbles, we pass this everywhere
### stop
Brain = adjust_high_returns(Brain, 3)
Brain = calculate_labels(Brain, 5)
Brain = adjust_Y(Brain)
Brain = remove_NA_returns(Brain)
Brain = adjust_IDYX(Brain)
Brain = adjust_return_features(Brain)
# YOLO
Nucleus = the_machines_will_rule(Brain, n = 25)
# YOLO
Nucleus = the_machines_will_rule(Brain, n = 75)
# YOLO
Nucleus = the_machines_will_rule(Brain, n = 150)
library(tidyverse)
library(R.utils)
library(readr)
library(lubridate)
dat_UNIV = read_csv(paste0(getwd(), "/Data/UNIVERSE.csv"))
dat_RETURNS = read_csv(paste0(getwd(), "/Data/RETURNS.csv"))
sourceDirectory(paste0(getwd(), '/Functions/'))
sourceDirectory(paste0(getwd(), '/Models/'))
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS) # BRAIN is a list of tibbles, we pass this everywhere
### stop
Brain = adjust_high_returns(Brain, 3)
Brain = calculate_labels(Brain, 5)
Brain = adjust_Y(Brain)
Brain = remove_NA_returns(Brain)
Brain = adjust_IDYX(Brain)
Brain = adjust_return_features(Brain)
# YOLO
Nucleus = the_machines_will_rule(Brain, n = 200)
1
?saveRDS
saveRDS(Nucleus, paste0(getwd(), "/Data/Nucleus.R"))
saveRDS(Nucleus, paste0(getwd(), "/Data/Nucleus.rds"))
Nucleus = readRDS(paste0(getwd(), "/Data/Nucleus.rds"))
Nucleus2 = Nucleus
label2 = 5
for (method in 1:(length(Nucleus2$`1980`$Method)-1)) {
for (year in 1:length(Nucleus2)) {
if(year == 1){
company_winners_vec = Nucleus2[[year]]$Method[[method]]$Companies$Winners$`Company Name.x`
company_losers_vec = Nucleus2[[year]]$Method[[method]]$Companies$Losers$`Company Name.x`
}
else{
company_winners_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Winners$`Company Name.x`, company_winners_vec)
company_losers_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Losers$`Company Name.x`, company_losers_vec)
}
}
winners = as.data.frame(table(company_winners_vec))
winners = winners[order(winners$Freq, decreasing = TRUE), ]
losers = as.data.frame(table(company_losers_vec))
losers = losers[order(losers$Freq, decreasing = TRUE), ]
write_csv(winners, paste0(getwd(), "/Results/Companies/winners_", names(Nucleus2$`1980`$Method)[method],"_", label2 ,".csv"))
write_csv(losers, paste0(getwd(), "/Results/Companies/losers_", names(Nucleus2$`1980`$Method)[method], "_", label2, ".csv"))
}
library(tidyverse)
for (method in 1:(length(Nucleus2$`1980`$Method)-1)) {
for (year in 1:length(Nucleus2)) {
if(year == 1){
company_winners_vec = Nucleus2[[year]]$Method[[method]]$Companies$Winners$`Company Name.x`
company_losers_vec = Nucleus2[[year]]$Method[[method]]$Companies$Losers$`Company Name.x`
}
else{
company_winners_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Winners$`Company Name.x`, company_winners_vec)
company_losers_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Losers$`Company Name.x`, company_losers_vec)
}
}
winners = as.data.frame(table(company_winners_vec))
winners = winners[order(winners$Freq, decreasing = TRUE), ]
losers = as.data.frame(table(company_losers_vec))
losers = losers[order(losers$Freq, decreasing = TRUE), ]
write_csv(winners, paste0(getwd(), "/Results/Companies/winners_", names(Nucleus2$`1980`$Method)[method],"_", label2 ,".csv"))
write_csv(losers, paste0(getwd(), "/Results/Companies/losers_", names(Nucleus2$`1980`$Method)[method], "_", label2, ".csv"))
}
year = 1
method = 1
company_winners_vec = Nucleus2[[year]]$Method[[method]]$Companies$Winners$`Company Name.x`
for (method in 1:(length(Nucleus2$`1980`$Method)-1)) {
for (year in 1:length(Nucleus2)) {
if(year == 1){
company_winners_vec = Nucleus2[[year]]$Method[[method]]$Companies$Winners$conm.x
company_losers_vec = Nucleus2[[year]]$Method[[method]]$Companies$Losers$conm.x
}
else{
company_winners_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Winners$conm.x, company_winners_vec)
company_losers_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Losers$conm.x, company_losers_vec)
}
}
winners = as.data.frame(table(company_winners_vec))
winners = winners[order(winners$Freq, decreasing = TRUE), ]
losers = as.data.frame(table(company_losers_vec))
losers = losers[order(losers$Freq, decreasing = TRUE), ]
write_csv(winners, paste0(getwd(), "/Results/Companies/winners_", names(Nucleus2$`1980`$Method)[method],"_", label2 ,".csv"))
write_csv(losers, paste0(getwd(), "/Results/Companies/losers_", names(Nucleus2$`1980`$Method)[method], "_", label2, ".csv"))
}
for (method in 1:(length(Nucleus2$`1980`$Method)-1)) {
for (year in 1:length(Nucleus2)) {
if(year == 1){
company_winners_vec = Nucleus2[[year]]$Method[[method]]$Companies$Winners$conm.x
company_losers_vec = Nucleus2[[year]]$Method[[method]]$Companies$Losers$conm.x
company_winners_vec_gv = Nucleus2[[year]]$Method[[method]]$Companies$Winners$GVKEY
company_losers_vec_gv = Nucleus2[[year]]$Method[[method]]$Companies$Losers$GVKEY
}
else{
company_winners_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Winners$conm.x, company_winners_vec)
company_losers_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Losers$conm.x, company_losers_vec)
company_winners_vec_gv = c(Nucleus2[[year]]$Method[[method]]$Companies$Winners$GVKEY, company_winners_vec_gv)
company_losers_vec_gv = c(Nucleus2[[year]]$Method[[method]]$Companies$Losers$GVKEY, company_losers_vec_gv)
}
}
winners = as.data.frame(table(company_winners_vec))
winners = winners[order(winners$Freq, decreasing = TRUE), ]
losers = as.data.frame(table(company_losers_vec))
losers = losers[order(losers$Freq, decreasing = TRUE), ]
write_csv(winners, paste0(getwd(), "/Results/Companies/winners_", names(Nucleus2$`1980`$Method)[method],"_", label2 ,".csv"))
write_csv(losers, paste0(getwd(), "/Results/Companies/losers_", names(Nucleus2$`1980`$Method)[method], "_", label2, ".csv"))
}
save_company_frequencies <- function(Nucleus2 = Nucleus, label2 = label){
for (method in 1:(length(Nucleus2$`1980`$Method)-1)) {
for (year in 1:length(Nucleus2)) {
if(year == 1){
company_winners_vec = Nucleus2[[year]]$Method[[method]]$Companies$Winners$conm.x
company_losers_vec = Nucleus2[[year]]$Method[[method]]$Companies$Losers$conm.x
company_winners_vec_gv = Nucleus2[[year]]$Method[[method]]$Companies$Winners$GVKEY
company_losers_vec_gv = Nucleus2[[year]]$Method[[method]]$Companies$Losers$GVKEY
}
else{
company_winners_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Winners$conm.x, company_winners_vec)
company_losers_vec = c(Nucleus2[[year]]$Method[[method]]$Companies$Losers$conm.x, company_losers_vec)
company_winners_vec_gv = c(Nucleus2[[year]]$Method[[method]]$Companies$Winners$GVKEY, company_winners_vec_gv)
company_losers_vec_gv = c(Nucleus2[[year]]$Method[[method]]$Companies$Losers$GVKEY, company_losers_vec_gv)
}
}
winners = as.data.frame(table(company_winners_vec))
winners = winners[order(winners$Freq, decreasing = TRUE), ]
losers = as.data.frame(table(company_losers_vec))
losers = losers[order(losers$Freq, decreasing = TRUE), ]
write_csv(winners, paste0(getwd(), "/Results/Companies/winners_", names(Nucleus2$`1980`$Method)[method],"_", label2 ,".csv"))
write_csv(losers, paste0(getwd(), "/Results/Companies/losers_", names(Nucleus2$`1980`$Method)[method], "_", label2, ".csv"))
}
}
frequency_df = data.frame("Method" = names(Nucleus2$`1980`$Method)[-length(Nucleus2$`1980`$Method)])
matrix = matrix(0, 1, length(Nucleus2))
frequency_df = cbind(frequency_df, matrix)
names(frequency_df)[-1] = names(Nucleus2)
frequency_df = data.frame("Method" = names(Nucleus2$`1980`$Method)[-length(Nucleus2$`1980`$Method)])
matrix = matrix(0, 1, length(Nucleus2))
frequency_df = cbind(frequency_df, matrix)
names(frequency_df)[-1] = names(Nucleus2)
for (method in 1:(length(Nucleus2$`1980`$Method)-1)) {
for (year in 1:length(Nucleus2)) {
frequency_df[method, year+1] = length(Nucleus2[[year]]$Method[[method]]$Yhat[Nucleus2[[year]]$Method[[method]]$Yhat == label2])
}
}
write_csv(frequency_df, paste0(getwd(), "/Results/Stock Count/Winners_", label2,".csv"))
write_csv(frequency_df, paste0(getwd(), "/Results/Stock Count/Winners_", label2,".csv"))
save_prediction_frequencies <- function(Nucleus2 = Nucleus, label2 = label){
frequency_df = data.frame("Method" = names(Nucleus2$`1980`$Method)[-length(Nucleus2$`1980`$Method)])
matrix = matrix(0, 1, length(Nucleus2))
frequency_df = cbind(frequency_df, matrix)
names(frequency_df)[-1] = names(Nucleus2)
for (method in 1:(length(Nucleus2$`1980`$Method)-1)) {
for (year in 1:length(Nucleus2)) {
frequency_df[method, year+1] = length(Nucleus2[[year]]$Method[[method]]$Yhat[Nucleus2[[year]]$Method[[method]]$Yhat == label2])
}
}
write_csv(frequency_df, paste0(getwd(), "/Results/Stock Count/Winners_", label2,".csv"))
}
library(tidyverse)
library(R.utils)
library(readr)
library(lubridate)
dat_UNIV = read_csv(paste0(getwd(), "/Data/UNIVERSE.csv"))
dat_RETURNS = read_csv(paste0(getwd(), "/Data/RETURNS.csv"))
sourceDirectory(paste0(getwd(), '/Functions/'))
sourceDirectory(paste0(getwd(), '/Models/'))
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS) # BRAIN is a list of tibbles, we pass this everywhere
start_time = proc.time()
for (label in c(2, 5, 10, 20)) {
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS)
Brain = adjust_high_returns(Brain, 3)
Brain = calculate_labels(Brain, label)
Brain = adjust_Y(Brain)
Brain = remove_NA_returns(Brain)
Brain = adjust_IDYX(Brain)
Brain = adjust_return_features(Brain)
Nucleus = the_machines_will_rule(Brain, n = 500)
save_accuracy_and_confusion_matrix(Nucleus, label)
save_company_frequencies(Nucleus, label)
save_prediction_frequencies(Nucleus, label)
cagr_df = get_cagrs(Nucleus)
write_csv(cagr_df, paste0(getwd(), "/Results/CAGRS/methods_", label, ".csv"))
cat(label, "\n")
}
end_time = proc.time()
(end_time - start_time) / 60 / 60 ## Hours
## run pipeline-1
library(randomForest)
indices = sample(1:nrow(Brain$Universe), 1000)
library(tidyverse)
library(R.utils)
library(readr)
library(lubridate)
dat_UNIV = read_csv(paste0(getwd(), "/Data/UNIVERSE.csv"))
dat_RETURNS = read_csv(paste0(getwd(), "/Data/RETURNS.csv"))
sourceDirectory(paste0(getwd(), '/Functions/'))
sourceDirectory(paste0(getwd(), '/Models/'))
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS) # BRAIN is a list of tibbles, we pass this everywhere
## run pipeline-1
library(randomForest)
warnings()
library(tidyverse)
library(R.utils)
library(readr)
library(lubridate)
dat_UNIV = read_csv(paste0(getwd(), "/Data/UNIVERSE.csv"))
dat_RETURNS = read_csv(paste0(getwd(), "/Data/RETURNS.csv"))
sourceDirectory(paste0(getwd(), '/Functions/'))
sourceDirectory(paste0(getwd(), '/Models/'))
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS) # BRAIN is a list of tibbles, we pass this everywhere
label = 2
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS)
Brain = adjust_high_returns(Brain, 3)
Brain = calculate_labels(Brain, label)
Brain = adjust_Y(Brain)
Brain = remove_NA_returns(Brain)
Brain = adjust_IDYX(Brain)
Brain = adjust_return_features(Brain)
indices = sample(1:nrow(Brain$Universe), 1000)
rf = randomForest(Brain$Universe[indices, -(1:6)], Brain$Universe$Y[indices], mtry = sqrt(ncol(Brain$Universe[, -(1:6)])))
## run pipeline-1
library(randomForest)
rf = randomForest(Brain$Universe[indices, -(1:6)], Brain$Universe$Y[indices], mtry = sqrt(ncol(Brain$Universe[, -(1:6)])))
indices = sample(1:nrow(Brain$Universe), 10000)
rf = randomForest(Brain$Universe[indices, -(1:6)], Brain$Universe$Y[indices], mtry = sqrt(ncol(Brain$Universe[, -(1:6)])))
Brain$Universe$Y[indices]
indices = sample(1:nrow(Brain$Universe), 1000)
rf = randomForest(Brain$Universe[indices, -(1:6)], factor(Brain$Universe$Y[indices]), mtry = sqrt(ncol(Brain$Universe[, -(1:6)])))
varImpPlot(rf, main = paste0("Feature Importance - Label", label))
indices = sample(1:nrow(Brain$Universe), 10000)
rf = randomForest(Brain$Universe[indices, -(1:6)], factor(Brain$Universe$Y[indices]), mtry = sqrt(ncol(Brain$Universe[, -(1:6)])))
varImpPlot(rf, main = paste0("Feature Importance - Label", label))
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
png(paste0(label, ".png"))
mjr = varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
png(paste0(label, ".png"))
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
getwd()
png(paste0(label, ".png"))
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
png(paste0(label, ".png"))
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
dev.off()
png(paste0(label, ".png"), 1000, 1000)
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
dev.off()
png(paste0(label, ".png"), 700, 700)
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
dev.off()
png(paste0(label, ".png"), 700, 500)
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
dev.off()
png(paste0(label, ".png"), width = 700, height = 500, quality = 200)
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
dev.off()
png(paste0(label, ".png"), width = 700, height = 500, quality = 10)
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
dev.off()
pdf(width = 10, height = 8)
varImpPlot(rf, main = paste0("Feature Importance - Label ", label))
dev.off()
pdf(width = 10, height = 8)
varImpPlot(rf, main = paste0("Feature Importance - L", label))
dev.off()
pdf(width = 10, height = 8)
varImpPlot(rf, main = paste0("Feature Importance - L = ", label))
dev.off()
pdf(width = 10, height = 8)
varImpPlot(rf, main = paste0("Feature Importance - n = ", label))
dev.off()
pdf(width = 10, height = 8)
varImpPlot(rf, main = paste0("Feature Importance (n = ", label, ")"))
dev.off()
## run pipeline-1
library(randomForest)
for (label in c(2, 5, 10, 20)) {
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS)
Brain = adjust_high_returns(Brain, 3)
Brain = calculate_labels(Brain, label)
Brain = adjust_Y(Brain)
Brain = remove_NA_returns(Brain)
Brain = adjust_IDYX(Brain)
Brain = adjust_return_features(Brain)
indices = sample(1:nrow(Brain$Universe), 10000)
rf = randomForest(Brain$Universe[indices, -(1:6)], factor(Brain$Universe$Y[indices]), mtry = sqrt(ncol(Brain$Universe[, -(1:6)])))
pdf(width = 10, height = 8)
varImpPlot(rf, main = paste0("Feature Importance (n = ", label, ")"))
dev.off()
}
for (label in c(2, 5, 10, 20)) {
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS)
Brain = adjust_high_returns(Brain, 3)
Brain = calculate_labels(Brain, label)
Brain = adjust_Y(Brain)
Brain = remove_NA_returns(Brain)
Brain = adjust_IDYX(Brain)
Brain = adjust_return_features(Brain)
indices = sample(1:nrow(Brain$Universe), 10000)
rf = randomForest(Brain$Universe[indices, -(1:6)], factor(Brain$Universe$Y[indices]), mtry = sqrt(ncol(Brain$Universe[, -(1:6)])))
pdf(width = 10, height = 8)
varImpPlot(rf, main = paste0("Feature Importance (n = ", label, ")"))
dev.off()
}
## run pipeline-1
library(randomForest)
for (label in c(2, 5, 10, 20)) {
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS)
Brain = adjust_high_returns(Brain, 3)
Brain = calculate_labels(Brain, label)
Brain = adjust_Y(Brain)
Brain = remove_NA_returns(Brain)
Brain = adjust_IDYX(Brain)
Brain = adjust_return_features(Brain)
indices = sample(1:nrow(Brain$Universe), 10000)
rf = randomForest(Brain$Universe[indices, -(1:6)], factor(Brain$Universe$Y[indices]), mtry = sqrt(ncol(Brain$Universe[, -(1:6)])))
pdf(paste0(label), width = 10, height = 8)
varImpPlot(rf, main = paste0("Feature Importance (n = ", label, ")"))
dev.off()
}
## run pipeline-1
library(randomForest)
for (label in c(2, 5, 10, 20)) {
Brain = list("Universe" = dat_UNIV, "Returns" = dat_RETURNS)
Brain = adjust_high_returns(Brain, 3)
Brain = calculate_labels(Brain, label)
Brain = adjust_Y(Brain)
Brain = remove_NA_returns(Brain)
Brain = adjust_IDYX(Brain)
Brain = adjust_return_features(Brain)
indices = sample(1:nrow(Brain$Universe), 10000)
rf = randomForest(Brain$Universe[indices, -(1:6)], factor(Brain$Universe$Y[indices]), mtry = sqrt(ncol(Brain$Universe[, -(1:6)])))
pdf(paste0(label, ".pdf"), width = 10, height = 8)
varImpPlot(rf, main = paste0("Feature Importance (n = ", label, ")"))
dev.off()
}
log(100)
library(tidyverse)
library(lubridate)
dat_UNIV = read_csv(paste0(getwd(), "/Data/UNIV_IMP.csv"))
# lets calculate ratios
# profitability
dat_UNIV = dat_UNIV %>% mutate(gross_margin = gp / revt, operating_margin = cfo / revt, net_profit_margin = ni / revt)
# liquidity
dat_UNIV = dat_UNIV %>% mutate(current_ratio = act / lct, quick_ratio = (act - invt) / lct, cash_ratio = ch / lct)
# efficiency of working captital
dat_UNIV = dat_UNIV %>% mutate(asset_turnover = revt / at, inventory_turnover = cogs / invt)
# interest
dat_UNIV = dat_UNIV %>% mutate(ebit_interest = ebit / xint, ebitda_interest = ebitda / xint)
# leverage
dat_UNIV = dat_UNIV %>% mutate(debt_to_book_equity = dltt / book_value,
debt_to_market_cap  = dltt / market_cap,
debt_to_captial = dltt / (book_value + dltt),
equity_multiplier = at / book_value)
# operating returns
dat_UNIV = dat_UNIV %>% mutate(return_on_equity = ni / book_value, return_on_assets = (ni + xint) / at)
# valuation
dat_UNIV = dat_UNIV %>% mutate(market_to_book = market_cap / book_value, price_to_earnings = prcc_c_adj / epspx_adj)
# lets remove inf values from dividing
dat_UNIV = dat_UNIV[is.finite(rowSums(dat_UNIV[, 9:50])), ]
# calculate changes
dat_UNIV = dat_UNIV %>% group_by(GVKEY) %>%
mutate(market_cap_chg = market_cap / lag(market_cap) - 1,
book_value_chg = book_value / lag(book_value) - 1,
cfo_chg = cfo / lag(cfo) - 1,
gross_margin_chg = gross_margin / lag(gross_margin) - 1,
operating_margin_chg = operating_margin / lag(operating_margin) - 1,
net_profit_margin_chg = net_profit_margin / lag(net_profit_margin) - 1,
current_ratio_chg = current_ratio / lag(current_ratio) - 1,
quick_ratio_chg = quick_ratio / lag(quick_ratio) - 1,
cash_ratio_chg = cash_ratio / lag(cash_ratio) - 1,
asset_turnover_chg = asset_turnover / lag(asset_turnover) - 1,
inventory_turnover_chg = inventory_turnover / lag(inventory_turnover) - 1,
ebit_interest_chg = ebit_interest / lag(ebit_interest) - 1,
ebitda_interest_chg = ebitda_interest / lag(ebitda_interest) - 1,
debt_to_book_equity_chg = debt_to_book_equity / lag(debt_to_book_equity) - 1,
debt_to_market_cap_chg = debt_to_market_cap / lag(debt_to_market_cap) - 1,
debt_to_captial_chg = debt_to_captial / lag(debt_to_captial) - 1,
equity_multiplier_chg = equity_multiplier / lag(equity_multiplier) - 1,
return_on_equity_chg = return_on_equity / lag(return_on_equity) - 1,
return_on_assets_chg = return_on_assets / lag(return_on_assets) - 1,
market_to_book_chg = market_to_book / lag(market_to_book) - 1,
price_to_earnings_chg = price_to_earnings / lag(price_to_earnings) - 1)
summary(dat_UNIV)
library(tidyverse)
library(lubridate)
dat_UNIV = read_csv(paste0(getwd(), "/Data/UNIV_IMP.csv"))
# lets calculate ratios
# profitability
dat_UNIV = dat_UNIV %>% mutate(gross_margin = gp / revt, operating_margin = cfo / revt, net_profit_margin = ni / revt)
# liquidity
dat_UNIV = dat_UNIV %>% mutate(current_ratio = act / lct, quick_ratio = (act - invt) / lct, cash_ratio = ch / lct)
# efficiency of working captital
dat_UNIV = dat_UNIV %>% mutate(asset_turnover = revt / at, inventory_turnover = cogs / invt)
# interest
dat_UNIV = dat_UNIV %>% mutate(ebit_interest = ebit / xint, ebitda_interest = ebitda / xint)
# leverage
dat_UNIV = dat_UNIV %>% mutate(debt_to_book_equity = dltt / book_value,
debt_to_market_cap  = dltt / market_cap,
debt_to_captial = dltt / (book_value + dltt),
equity_multiplier = at / book_value)
# operating returns
dat_UNIV = dat_UNIV %>% mutate(return_on_equity = ni / book_value, return_on_assets = (ni + xint) / at)
# valuation
dat_UNIV = dat_UNIV %>% mutate(market_to_book = market_cap / book_value, price_to_earnings = prcc_c_adj / epspx_adj)
# lets remove inf values from dividing
dat_UNIV = dat_UNIV[is.finite(rowSums(dat_UNIV[, 9:50])), ]
summary(dat_UNIV)
# calculate changes
dat_UNIV = dat_UNIV %>% group_by(GVKEY) %>%
mutate(market_cap_chg = market_cap / lag(market_cap) - 1,
book_value_chg = book_value / lag(book_value) - 1,
cfo_chg = cfo / lag(cfo) - 1,
gross_margin_chg = gross_margin / lag(gross_margin) - 1,
operating_margin_chg = operating_margin / lag(operating_margin) - 1,
net_profit_margin_chg = net_profit_margin / lag(net_profit_margin) - 1,
current_ratio_chg = current_ratio / lag(current_ratio) - 1,
quick_ratio_chg = quick_ratio / lag(quick_ratio) - 1,
cash_ratio_chg = cash_ratio / lag(cash_ratio) - 1,
asset_turnover_chg = asset_turnover / lag(asset_turnover) - 1,
inventory_turnover_chg = inventory_turnover / lag(inventory_turnover) - 1,
ebit_interest_chg = ebit_interest / lag(ebit_interest) - 1,
ebitda_interest_chg = ebitda_interest / lag(ebitda_interest) - 1,
debt_to_book_equity_chg = debt_to_book_equity / lag(debt_to_book_equity) - 1,
debt_to_market_cap_chg = debt_to_market_cap / lag(debt_to_market_cap) - 1,
debt_to_captial_chg = debt_to_captial / lag(debt_to_captial) - 1,
equity_multiplier_chg = equity_multiplier / lag(equity_multiplier) - 1,
return_on_equity_chg = return_on_equity / lag(return_on_equity) - 1,
return_on_assets_chg = return_on_assets / lag(return_on_assets) - 1,
market_to_book_chg = market_to_book / lag(market_to_book) - 1,
price_to_earnings_chg = price_to_earnings / lag(price_to_earnings) - 1)
View(dat_UNIV)
dim(dat_UNIV)
View(dat_UNIV[, c(1:4, 67:71)])
View(dat_UNIV %>% select(datadate, conm, return_on_equity, return_on_equity_chg))
0.117855785 / 0.007343171 -1
0.117855785 / -0.007343171 -1
choose(5, 2)
dat_WRDS <- read_csv("Data/WRDS.csv")
library(readr)
library(tidyverse)
library(readxl)
library(lubridate)
dat_WRDS <- read_csv("Data/WRDS.csv")
View(dat_WRDS)
str(dat_WRDS)
summary(dat_WRDS)
for(row in 1:nrow(dat_WRDS)){
for(col in 1:ncol(dat_WRDS)){
cat(dat_WRDS][row, col], "\n")
}
}
for(row in 1:nrow(dat_WRDS)){
for(col in 1:ncol(dat_WRDS)){
cat(dat_WRDS[row, col], "\n")
}
}
cat(dat_WRDS[row, col], "\n")
row = 1
col = 1
dat_WRDS[row, col]
dat_WRDS[row, col] %>% as.double()
for(row in 1:nrow(dat_WRDS)){
for(col in 1:ncol(dat_WRDS)){
cat(dat_WRDS[row, col] %>% as.double(), "\n")
}
}
rnorm(0, 1)
rnorm(1, 0, 1)
rnorm(1, 0, 1)
