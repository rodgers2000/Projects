colnames(StockTable$Accuracy)
ggplot(StockTable$Accuracy, aes(x = time, y = ahead, color = accuracy)) + geom_point()
ggplot(StockTable$Accuracy, aes(x = time, y = ahead, color = accuracy)) + geom_jitter()
ggplot(StockTable$Accuracy, aes(x = time, y = ahead, color = accuracy)) +
geom_jitter() + facet_grid(stock ~ . )
ggplot(StockTable$Accuracy, aes(x = time, y = ahead, color = accuracy)) +
geom_jitter() + facet_grid(.~stock)
StockTable
library(tidyverse)
for (this_stock in StockTable$Accuracy$stock) {
temp_df = subset(StockTable$Accuracy, stock == this_stock)
ggplot(temp_df, aes(x = time, y = ahead, color = accuracy))
}
library(tidyverse)
for (this_stock in StockTable$Accuracy$stock) {
temp_df = subset(StockTable$Accuracy, stock == this_stock)
ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter()
}
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
StockTable = readRDS('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Data/StockTable.rds')
library(tidyverse)
for (this_stock in StockTable$Accuracy$stock) {
temp_df = subset(StockTable$Accuracy, stock == this_stock)
ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter()
}
ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter()
this_stock
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter()
ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter() +
labs(title = paste(this_stock))
for (this_stock in StockTable$Accuracy$stock) {
temp_df = subset(StockTable$Accuracy, stock == this_stock)
plot = ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter() +
labs(title = paste(this_stock))
print(plot)
}
temp_df = subset(StockTable$Accuracy, stock == this_stock)
plot = ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter() +
labs(title = paste(this_stock))
print(plot)
for (this_stock in StockTable$Accuracy$stock) {
temp_df = subset(StockTable$Accuracy, stock == this_stock)
plot = ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter() +
labs(title = paste(this_stock))
print(plot)
}
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
for (this_stock in unique(StockTable$Accuracy$stock)) {
for (method in unique(StockTable$Accuracy$method)) {
temp_df = subset(StockTable$Accuracy, stock == this_stock)
plot = ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter() +
labs(title = paste(this_stock))
print(plot)
}
}
for (this_stock in unique(StockTable$Accuracy$stock)) {
for (this_method in unique(StockTable$Accuracy$method)) {
temp_df = subset(StockTable$Accuracy, stock == this_stock & method == this_method)
plot = ggplot(temp_df, aes(x = time, y = ahead, color = accuracy)) + geom_jitter() +
labs(title = paste(this_stock, ' ', method))
print(plot)
}
}
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
library(tidyverse)
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
print(plot)
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
StockTable = readRDS('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Data/StockTable.rds')
StockTable = readRDS('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Data/StockTable.rds')
StockTable = readRDS('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Data/StockTable.rds')
stocks = unique(StockTable$Accuracy$stock)
methods = unique(StockTable$Accuracy$method)
aheads = unique(StockTable$Accuracy$ahead)
times = unique(StockTable$Accuracy$time)
n_tests = unique(StockTable$Accuracy$n_test)
compute_general_stats <- function (this_vector) {
this_mean = mean(this_vector)
this_median = median(this_vector)
this_std = sd(this_vector)
this_max = max(this_vector)
this_min = min(this_vector)
this_df = data.frame(this_mean, this_median, this_std, this_max, this_min)
colnames(this_df) = c('mean', 'median', 'std', 'max', 'min')
return(this_df)
}
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
library(tidyverse)
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock & this_method == this_method)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock & this_method == this_method)
crit_row
this_df_r
values_2_match = crit_row[, c('method', 'time', 'ahead')]
values_2_match
this_df_r[, c('method', 'time', 'ahead') %*% values_2_match
this_df_r[, c('method', 'time', 'ahead') %*% values_2_match
this_df_r[, c('method', 'time', 'ahead') %*% values_2_match
this_df_r[, c('method', 'time', 'ahead') %*% values_2_match]
this_df_r[, c('method', 'time', 'ahead') %*% values_2_match]
this_df_r[, c('method', 'time', 'ahead') %*% values_2_match]
this_df_r[, c('method', 'time', 'ahead') %*% values_2_match]
this_df_r[, c('method', 'time', 'ahead')] %*% values_2_match
this_df_r[, c('method', 'time', 'ahead')] %*% values_2_match
this_df_r[, c('method', 'time', 'ahead')]
values_2_match
this_df_r[, c('method', 'time', 'ahead')] %*% values_2_match
this_df_r[, c('method', 'time', 'ahead')] %in% values_2_match
values_2_match
this_df_r[, c('method', 'time', 'ahead')]
this_df_r[, c('method', 'time', 'ahead')] %in% values_2_match
values_2_match
this_df_r[, c('method', 'time', 'ahead')] == values_2_match
values_2_match
crit_r = subset(this_df_r, method == values_2_match$method &
time == values_2_match$time &
ahead == values_2_match$ahead)
crit_r
crit_a = cbind(crit_a, crit_r$return)
crit_a
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock & this_method == this_method)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock & this_method == this_method)
crit_pt = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r, method == values_2_match$method &
time == values_2_match$time &
ahead == values_2_match$ahead)
crit_a = cbind(crit_a, crit_r$return)
crit_a
crit_a = cbind(crit_a, 'return' = crit_r$return)
crit_a
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxMinDF = data.frame()
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxMinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
for (this_method in methods) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock & this_method == this_method)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock & this_method == this_method)
crit_pt = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r, method == values_2_match$method &
time == values_2_match$time &
ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxMinDF = rbind(MaxMinDF, crit_a)
}
}
}
MaxMinDF
n_tests
stocks
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
MaxMinDF
MaxMinDF
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxMinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
for (this_method in methods) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock & method == this_method)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock & method == this_method)
crit_pt = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r, method == values_2_match$method &
time == values_2_match$time &
ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxMinDF = rbind(MaxMinDF, crit_a)
}
}
}
MaxMinDF
write_csv(MaxMinDF, '/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Results/Tables/Stats/MaxMin.csv')
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r &
time == values_2_match$time &
ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxMinDF = rbind(MaxMinDF, crit_a)
}
}
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r &
time == values_2_match$time &
ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxMinDF = rbind(MaxMinDF, crit_a)
}
}
values_2_match$time
values_2_match
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
values_2_match
crit_a
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
this_df_a
this_df_r
crit_pt_max
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt, ]
crit_a
this_df_a
crit_pt
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r &
time == values_2_match$time &
ahead == values_2_match$ahead)
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r &
time == values_2_match$time &
ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxDF = rbind(MaxDF, crit_a)
}
}
values_2_match
time == values_2_match$time
time
values_2_match$time
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r & time == values_2_match$time & ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxDF = rbind(MaxDF, crit_a)
}
}
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r & time == values_2_match$time & ahead == values_2_match$ahead)
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r,  time == values_2_match$time & ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxDF = rbind(MaxDF, crit_a)
}
}
warnings()
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r,  time == values_2_match$time & ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxDF = rbind(MaxDF, crit_a)
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r,  time == values_2_match$time & ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxDF = rbind(MaxDF, crit_a)
}
}
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r,  time == values_2_match$time & ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxDF = rbind(MaxDF, crit_a)
}
}
warnings
warnings()
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r,  time == values_2_match$time & ahead == values_2_match$ahead)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxDF = rbind(MaxDF, crit_a)
debugSource('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Functions/StockTable_analysis.R')
MaxDF
MaxDF
MaxDF
MaxDF
MaxDF
MaxDF
MaxDF
MaxDF
MaxDF
crit_r$return
crit_r
crit_r = subset(this_df_r,  time == values_2_match$time &
ahead == values_2_match$ahead &
method == values_2_match$method)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxDF = rbind(MaxDF, crit_a)
# for each test n
# for each stock
# for each method
# find min and max accuracy
# find the parameters
# find the return
MaxDF = data.frame()
MinDF = data.frame()
for (this_test_n in n_tests) {
for (this_stock in stocks) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = which.max(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r,  time == values_2_match$time &
ahead == values_2_match$ahead &
method == values_2_match$method)
crit_a = cbind(crit_a, 'return' = crit_r$return)
MaxDF = rbind(MaxDF, crit_a)
}
}
MaxDF
find_min_or_max = function(df, my_func) {
for (this_test_n in n_tests) {
for (this_stock in stocks) {
this_df_a = subset(StockTable$Accuracy, n_test == this_test_n & stock == this_stock)
this_df_r = subset(StockTable$Return, n_test == this_test_n & stock == this_stock)
crit_pt_max = my_func(this_df_a$accuracy)
crit_a = this_df_a[crit_pt_max, ]
values_2_match = crit_a[, c('method', 'time', 'ahead')]
crit_r = subset(this_df_r,  time == values_2_match$time &
ahead == values_2_match$ahead &
method == values_2_match$method)
crit_a = cbind(crit_a, 'return' = crit_r$return)
df = rbind(df, crit_a)
}
}
return(df)
}
MaxDF = find_min_or_max(data.frame(), which.max())
MaxDF = find_min_or_max(data.frame(), which.max)
MinDF = find_min_or_max(data.frame(), which.min)
MinDF
write_csv(MaxDF, '/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Results/Tables/Stats/Max_Acc.csv')
write_csv(MinDF, '/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Results/Tables/Stats/Min_Acc.csv')
MaxDF
write_csv(MaxDF, '/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Results/Tables/Stats/Max_Accuracy.csv')
write_csv(MinDF, '/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Results/Tables/Stats/Min_Accuracy.csv')
citation()
citation('Caret')
?citation
library(caret)
citation('caret')
citation('R6')
citation('quantmod')
citation('tidyverse')
citation('lahman')
library(Lahman)
citation('Lahman')
citation('Vars')
citation('vars')
citation('forecast')
toBibtex(citation('forecast'))
toBibtex(citation('vars'))
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Scripts/run_stocktables.R')
warnings()
quantmod::getSymbols('VIX')
View(VIX)
quantmod::getSymbols('^VIX')
View(VIX)
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Scripts/run_stocktables.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/STAT 450/R/Up or Down/Game/Scripts/run_stocktables.R')
