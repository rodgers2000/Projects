balls = 0; strikes = 0
}
}
# lets give what we promised
dat_results$count = paste0(dat_results$balls, "-", dat_results$strikes)
# lets remove NA values, since they are inrelevant
dat_results = dat_results %>% subset(!is.na(pitch))
return(dat_results)
}
source(path('get_player_frequencies'))
pitch_frequency <- function(pitcher_name_2 = "Justin Verlander", dat_X = dat_pitches){
## this function returns the pitch thrown given the count and inning
## it gives the count, pitch type, and inning
# create subset for player
dat_game = dat_X %>% subset(pitcher_name == pitcher_name_2)
# create new dataframe to hold results
dat_results = data.frame(
1:nrow(dat_game), 1:nrow(dat_game), 1:nrow(dat_game), 1:nrow(dat_game)
)
colnames(dat_results) = c("balls", "strikes", "pitch", "inning")
# now we can create the data. the data is sequential, so we can loop through rows to gather each pitch for an atbat.
balls = 0; strikes = 0
for (pitch in 1:nrow(dat_game)){
# store balls and strikes
dat_results$balls[pitch] = balls
dat_results$strikes[pitch] = strikes
# store pitch type
dat_results$pitch[pitch] = dat_game$pitch_type[pitch]
# store inning
dat_results$inning[pitch] = dat_game$inning.y[pitch]
# update balls and strikes
if (dat_game$pitch_type[pitch] == "S" & strikes < 2){
strikes = strikes + 1
}
else if (dat_game$type[pitch] == "B" & balls < 3){
balls = balls + 1
} # if the batter is out, or if the batter name changes, reset count
else if ((dat_game$type[pitch] == "X") | (dat_game$batter_name[pitch] != dat_game$batter_name[pitch+1])){
balls = 0; strikes = 0
}
}
# lets give what we promised
dat_results$count = paste0(dat_results$balls, "-", dat_results$strikes)
# lets remove NA values, since they are inrelevant
dat_results = dat_results %>% subset(!is.na(pitch))
return(dat_results)
}
source(path('get_player_frequencies'))
dat_game
dat_pitches
pitch_frequency <- function(pitcher_name_2 = "Justin Verlander", dat_X = dat_pitches){
## this function returns the pitch thrown given the count and inning
## it gives the count, pitch type, and inning
# create subset for player
dat_game = dat_X %>% subset(pitcher_name == pitcher_name_2)
# create new dataframe to hold results
dat_results = data.frame(
1:nrow(dat_game), 1:nrow(dat_game), 1:nrow(dat_game), 1:nrow(dat_game)
)
colnames(dat_results) = c("balls", "strikes", "pitch", "inning")
# now we can create the data. the data is sequential, so we can loop through rows to gather each pitch for an atbat.
balls = 0; strikes = 0
for (pitch in 1:nrow(dat_game)){
# store balls and strikes
dat_results$balls[pitch] = balls
dat_results$strikes[pitch] = strikes
# store pitch type
dat_results$pitch[pitch] = dat_game$pitch_type[pitch]
# store inning
dat_results$inning[pitch] = dat_game$inning.y[pitch]
# update balls and strikes
if (dat_game$type[pitch] == "S" & strikes < 2){
strikes = strikes + 1
}
else if (dat_game$type[pitch] == "B" & balls < 3){
balls = balls + 1
} # if the batter is out, or if the batter name changes, reset count
else if ((dat_game$type[pitch] == "X") | (dat_game$batter_name[pitch] != dat_game$batter_name[pitch+1])){
balls = 0; strikes = 0
}
}
# lets give what we promised
dat_results$count = paste0(dat_results$balls, "-", dat_results$strikes)
# lets remove NA values, since they are inrelevant
dat_results = dat_results %>% subset(!is.na(pitch_type))
return(dat_results)
}
source(path('get_player_frequencies'))
pitch_frequency <- function(pitcher_name_2 = "Justin Verlander", dat_X = dat_pitches){
## this function returns the pitch thrown given the count and inning
## it gives the count, pitch type, and inning
# create subset for player
dat_game = dat_X %>% subset(pitcher_name == pitcher_name_2)
# create new dataframe to hold results
dat_results = data.frame(
1:nrow(dat_game), 1:nrow(dat_game), 1:nrow(dat_game), 1:nrow(dat_game)
)
colnames(dat_results) = c("balls", "strikes", "pitch", "inning")
# now we can create the data. the data is sequential, so we can loop through rows to gather each pitch for an atbat.
balls = 0; strikes = 0
for (pitch in 1:nrow(dat_game)){
# store balls and strikes
dat_results$balls[pitch] = balls
dat_results$strikes[pitch] = strikes
# store pitch type
dat_results$pitch[pitch] = dat_game$pitch_type[pitch]
# store inning
dat_results$inning[pitch] = dat_game$inning.y[pitch]
# update balls and strikes
if (dat_game$type[pitch] == "S" & strikes < 2){
strikes = strikes + 1
}
else if (dat_game$type[pitch] == "B" & balls < 3){
balls = balls + 1
} # if the batter is out, or if the batter name changes, reset count
else if ((dat_game$type[pitch] == "X") | (dat_game$batter_name[pitch] != dat_game$batter_name[pitch+1])){
balls = 0; strikes = 0
}
}
# lets give what we promised
dat_results$count = paste0(dat_results$balls, "-", dat_results$strikes)
# lets remove NA values, since they are inrelevant
dat_results = dat_results %>% subset(!is.na(pitch))
return(dat_results)
}
source(path('get_player_frequencies'))
dat_X = dat_pitches
pitcher_name_2 = "Justin Verlander"
# create subset for player
dat_game = dat_X %>% subset(pitcher_name == pitcher_name_2)
# create new dataframe to hold results
dat_results = data.frame(
1:nrow(dat_game), 1:nrow(dat_game), 1:nrow(dat_game), 1:nrow(dat_game)
)
colnames(dat_results) = c("balls", "strikes", "pitch", "inning")
# now we can create the data. the data is sequential, so we can loop through rows to gather each pitch for an atbat.
balls = 0; strikes = 0
for (pitch in 1:nrow(dat_game)){
# store balls and strikes
dat_results$balls[pitch] = balls
dat_results$strikes[pitch] = strikes
# store pitch type
dat_results$pitch[pitch] = dat_game$pitch_type[pitch]
# store inning
dat_results$inning[pitch] = dat_game$inning.y[pitch]
# update balls and strikes
if (dat_game$type[pitch] == "S" & strikes < 2){
strikes = strikes + 1
}
else if (dat_game$type[pitch] == "B" & balls < 3){
balls = balls + 1
} # if the batter is out, or if the batter name changes, reset count
else if ((dat_game$type[pitch] == "X") | (dat_game$batter_name[pitch] != dat_game$batter_name[pitch+1])){
balls = 0; strikes = 0
}
}
# lets give what we promised
dat_results$count = paste0(dat_results$balls, "-", dat_results$strikes)
# lets remove NA values, since they are inrelevant
dat_results = dat_results %>% subset(!is.na(pitch))
dat_results
path <- function(file_name) paste0(getwd(), '/Scripts/', file_name, '.R')
source(path('get_player_markov'))
source(path('get_player_frequencies'))
source(path('get_player_stats'))
source(path('get_player_frequencies'))
source(path('get_player_frequencies'))
dat_raw_counts = pitch_frequency(player, dat_pitches)
dat_freqs = conditional_probabilities(dat_raw_counts)
dat_freqs = conditional_probabilities(dat_raw_counts)
dat_freqs = conditional_probabilities(dat_raw_counts)
dat_freqs = conditional_probabilities(dat_raw_counts)
dat_temp = dat_raw_counts
# we can condition on anything and calculate the probabilies this way.
# here we condition on the count and take the frequencies for each pitch
# so each count will sum to 1
dat_temp = dat_temp %>% subset(pitch != 'UN')
dat_results = dat_temp %>% group_by(count, pitch) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
dat_results$count = paste0('(', dat_results$count, ')')
dat_results = dat_results[,c(1, 2, 4, 3)]
dat_results
path <- function(file_name) paste0(getwd(), '/Scripts/', file_name, '.R')
source(path('get_player_markov'))
source(path('get_player_frequencies'))
source(path('get_player_stats'))
path <- function(file_name) paste0(getwd(), '/Scripts/', file_name, '.R')
source(path('get_player_markov'))
source(path('get_player_frequencies'))
source(path('get_player_stats'))
path <- function(file_name) paste0(getwd(), '/Scripts/', file_name, '.R')
source(path('get_player_markov'))
source(path('get_player_frequencies'))
source(path('get_player_stats'))
source(path('get_player_markov'))
library(tidyverse)
data_path = paste0(getwd(), "/Data/") # create general path for data file
file_name = paste0(data_path, "mlb_2017_regular_season.csv")
dat_mlb = read_csv(file_name)
# load functions
library(R.utils)
sourceDirectory(paste0(getwd(), '/Functions/'))
dat_mlb
# subset of dat mlb
dat_pitches = dat_mlb %>% select(type, des.x, pitch_type, event, inning.y, batter_name, pitcher_name)
dat_pitches
my_fav_pitchers = c('Justin Verlander', 'Lance McCullers')
path_data = paste0(getwd(), '/Data/Markov/')
player = my_fav_pitchers[1]
dat_raw_counts = pitch_frequency(player, dat_pitches)
sourceDirectory(paste0(getwd(), '/Functions/'))
library(tidyverse)
data_path = paste0(getwd(), "/Data/") # create general path for data file
file_name = paste0(data_path, "mlb_2017_regular_season.csv")
dat_mlb = read_csv(file_name)
# load functions
library(R.utils)
sourceDirectory(paste0(getwd(), '/Functions/'))
# subset of dat mlb
dat_pitches = dat_mlb %>% select(type, des.x, pitch_type, event, inning.y, batter_name, pitcher_name)
my_fav_pitchers = c('Justin Verlander', 'Lance McCullers')
path_data = paste0(getwd(), '/Data/Markov/')
# subset of dat mlb
dat_pitches = dat_mlb %>% select(type, des.x, pitch_type, event, inning.y, batter_name, pitcher_name)
my_fav_pitchers = c('Justin Verlander', 'Lance McCullers')
path_data = paste0(getwd(), '/Data/Markov/')
player = my_fav_pitchers[1]
dat_raw_counts = pitch_frequency(player, dat_pitches)
dat_ForO = fastball_or_offspeed(dat_raw_counts)
dat_temp = dat_raw_counts
dat_hold = dat_temp
dat_hold$pitch_type = if_else(dat_temp$pitch_type %in% c('FF', 'FT'), 'F', 'O')
dat_temp$pitch_type
dat_temp
dat_ForO = fastball_or_offspeed(dat_raw_counts)
fastball_or_offspeed <- function(dat_temp = dat_raw_counts){
dat_hold = dat_temp
dat_hold$pitch = if_else(dat_temp$pitch %in% c('FF', 'FT'), 'F', 'O')
return(dat_hold)
}
dat_temp = dat_raw_counts
dat_hold = dat_temp
dat_hold$pitch = if_else(dat_temp$pitch %in% c('FF', 'FT'), 'F', 'O')
return(dat_hold)
dat_hold)
dat_hold
dat_ForO = fastball_or_offspeed(dat_raw_counts)
dat_pitches = dat_mlb %>% select(type, des.x, pitch_type, event, inning.y, batter_name, pitcher_name)
my_fav_pitchers = c('Justin Verlander', 'Lance McCullers')
path_data = paste0(getwd(), '/Data/Markov/')
for (player in my_fav_pitchers) {
dat_raw_counts = pitch_frequency(player, dat_pitches)
dat_ForO = fastball_or_offspeed(dat_raw_counts)
for (order in 1:5) {
dat_patterns = get_markov_chain(dat_ForO, order)
save_data(dat_patterns, paste0(path_data, player, ' ', order))
}
}
dat_raw_counts = pitch_frequency(player, dat_pitches)
dat_ForO = fastball_or_offspeed(dat_raw_counts)
for (order in 1:5) {
dat_patterns = get_markov_chain(dat_ForO, order)
save_data(dat_patterns, paste0(path_data, player, ' ', order))
}
dat_temp = dat_ForO
order = 3
## this is the a continuous setting and does not condition on the batter, but rather the running total
# create 1-2-1 transformation
# create an empty mapping
markov_chain = list()
# create indices for each game
games = get_game_indices(dat_temp)
game = 1
dat_game = dat_temp[games[[game]],] # get data
dat_game$pitch_type
dat_game$pitch
my_fav_pitchers = c('Justin Verlander', 'Lance McCullers')
path_data = paste0(getwd(), '/Data/Markov/')
for (player in my_fav_pitchers) {
dat_raw_counts = pitch_frequency(player, dat_pitches)
dat_ForO = fastball_or_offspeed(dat_raw_counts)
for (order in 1:5) {
dat_patterns = get_markov_chain(dat_ForO, order)
save_data(dat_patterns, paste0(path_data, player, ' ', order))
}
}
dat_raw_counts = pitch_frequency(player, dat_pitches)
dat_ForO = fastball_or_offspeed(dat_raw_counts)
order = 1
dat_patterns = get_markov_chain(dat_ForO, order)
get_markov_chain <- function(dat_temp = dat_ForO, order = 3){
## this is the a continuous setting and does not condition on the batter, but rather the running total
# create 1-2-1 transformation
# create an empty mapping
markov_chain = list()
# create indices for each game
games = get_game_indices(dat_temp)
# for each game
for (game in 1:length(games)) {
dat_game = dat_temp[games[[game]],] # get data
# for each pitch that order allows, get a chain
for (pitch in (order+1):nrow(dat_game)) {
pattern = dat_game$pitch[(pitch-order):(pitch-1)]
# concatenate vector
string = ""
for (letter in pattern) {
string = paste0(string, letter)
}
yhat = if_else(dat_game$pitch[pitch] == 'F', 1, 2)
# if count hasnt been made, initialize it
if (!(string %in% names(markov_chain))) {
markov_chain[[string]] = tibble('pitch' = c('F', 'O'), 'n' = c(0,0))
markov_chain[[string]]$"n"[yhat] = 1
# else, increment it by 1
} else {
markov_chain[[string]]$"n"[yhat] = markov_chain[[string]]$"n"[yhat] + 1
}
}
}
# save n and standarize
n = length(markov_chain)
# for each element in mapping
for (seq in 1:n) {
df = markov_chain[[seq]]
# total = F+0
total = sum(df$n)
# initialize freq
df$freq = NA
# freq = F / total
df$freq[1] = df$n[1] / total
# freq = O / total
df$freq[2] = df$n[2] / total
markov_chain[[seq]] = df
}
# convert list to df
pattern = tibble('past' = 1:(2*n), 'pitch' = 0, 'n' = 0, 'freq' = 0)
# index <- 1:2
index = 1:2
labels = names(markov_chain)
# for each element in mapping
for (seq in 1:n) {
# name <- element name
name = labels[seq]
# df <- element df
df = markov_chain[[seq]]
# pattern{index} = [name df]
pattern[index, 1] = rep(name, 2)
pattern[index, 2:4] = df
# index <- index + 2
index = index + 2
}
# get freq as 3rd column
pattern = pattern[, c(1, 2, 4, 3)]
return(pattern)
}
dat_patterns = get_markov_chain(dat_ForO, order)
dat_pitches = dat_mlb %>% select(type, des.x, pitch_type, event, inning.y, batter_name, pitcher_name)
my_fav_pitchers = c('Justin Verlander', 'Lance McCullers')
path_data = paste0(getwd(), '/Data/Markov/')
for (player in my_fav_pitchers) {
dat_raw_counts = pitch_frequency(player, dat_pitches)
dat_ForO = fastball_or_offspeed(dat_raw_counts)
for (order in 1:5) {
dat_patterns = get_markov_chain(dat_ForO, order)
save_data(dat_patterns, paste0(path_data, player, ' ', order))
}
}
path <- function(file_name) paste0(getwd(), '/Scripts/', file_name, '.R')
source(path('get_player_markov'))
source(path('get_player_frequencies'))
source(path('get_player_stats'))
path <- function(file_name) paste0(getwd(), '/Scripts/', file_name, '.R')
library(tidyverse)
data_path = paste0(getwd(), "/Data/") # create general path for data file
file_name = paste0(data_path, "mlb_2017_regular_season.csv")
dat_mlb = read_csv(file_name)
# load functions
library(R.utils)
sourceDirectory(paste0(getwd(), '/Functions/'))
# subset of dat mlb
dat_pitches = dat_mlb %>% select(type, des.x, pitch_type, event, inning.y, batter_name, pitcher_name)
my_fav_pitchers = c('Justin Verlander', 'Lance McCullers')
path_data = paste0(getwd(), '/Data/Markov/')
player = my_fav_pitchers[1]
dat_raw_counts = pitch_frequency(player, dat_pitches)
dat_ForO = fastball_or_offspeed(dat_raw_counts)
dat_temp = dat_ForO
order = 3
## this is the a continuous setting and does not condition on the batter, but rather the running total
# create 1-2-1 transformation
# create an empty mapping
markov_chain = list()
# create indices for each game
games = get_game_indices(dat_temp)
# for each game
for (game in 1:length(games)) {
dat_game = dat_temp[games[[game]],] # get data
# for each pitch that order allows, get a chain
for (pitch in (order+1):nrow(dat_game)) {
pattern = dat_game$pitch[(pitch-order):(pitch-1)]
# concatenate vector
string = ""
for (letter in pattern) {
string = paste0(string, letter)
}
yhat = if_else(dat_game$pitch[pitch] == 'F', 1, 2)
# if count hasnt been made, initialize it
if (!(string %in% names(markov_chain))) {
markov_chain[[string]] = tibble('pitch' = c('F', 'O'), 'n' = c(0,0))
markov_chain[[string]]$"n"[yhat] = 1
# else, increment it by 1
} else {
markov_chain[[string]]$"n"[yhat] = markov_chain[[string]]$"n"[yhat] + 1
}
}
}
# save n and standarize
n = length(markov_chain)
# for each element in mapping
for (seq in 1:n) {
df = markov_chain[[seq]]
# total = F+0
total = sum(df$n)
# initialize freq
df$freq = NA
# freq = F / total
df$freq[1] = df$n[1] / total
# freq = O / total
df$freq[2] = df$n[2] / total
markov_chain[[seq]] = df
}
# convert list to df
pattern = tibble('past' = 1:(2*n), 'pitch' = 0, 'n' = 0, 'freq' = 0)
# index <- 1:2
index = 1:2
labels = names(markov_chain)
# for each element in mapping
for (seq in 1:n) {
# name <- element name
name = labels[seq]
# df <- element df
df = markov_chain[[seq]]
# pattern{index} = [name df]
pattern[index, 1] = rep(name, 2)
pattern[index, 2:4] = df
# index <- index + 2
index = index + 2
}
pattern
order(pattern$past)
sort(pattern$past)
order(pattern$past)
patterns$past[order(pattern$past)]
pattern$past[order(pattern$past)]
# get freq as 3rd column
pattern = pattern[order(pattern$past), c(1, 2, 4, 3)]
pattern
path <- function(file_name) paste0(getwd(), '/Scripts/', file_name, '.R')
source(path('get_player_markov'))
library(tidyverse)
start_time = proc.time()
dat_mlb = mlb_query(start = '2017-04-02', end = '2017-10-01')
library(tidyverse)
library(mlbgameday)
start_time = proc.time()
dat_mlb = mlb_query(start = '2017-04-02', end = '2017-10-01')
library(mlbgameday)
mlb_query <- function(start = '2017-04-02', end = '2017-10-01', season_type = 'r'){
library(mlbgameday)
# this loads the urls
game_ids <- search_gids(start = start, end = end, game_type = season_type)
# Run larger requests in parallel.
library(doParallel)
library(foreach)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
registerDoParallel(cl)
# this creates data for both team. very raw
df <- get_payload(game_ids = game_ids, dataset = "inning_all")
stopImplicitCluster()
rm(cl)
return(df)
}
library(tidyverse)
start_time = proc.time()
dat_mlb = mlb_query(start = '2017-04-02', end = '2017-10-01')
mlb_query <- function(start = '2017-04-02', end = '2017-10-01', season_type = 'r'){
library(mlbgameday)
# this loads the urls
game_ids <- search_gids(start = start, end = end, game_type = season_type)
# Run larger requests in parallel.
library(doParallel)
library(foreach)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
registerDoParallel(cl)
# this creates data for both team. very raw
df <- get_payload(game_ids = game_ids, dataset = "inning_all")
stopImplicitCluster()
rm(cl)
return(df)
}
library(tidyverse)
library(tidyverse)
start_time = proc.time()
dat_mlb = mlb_query(start = '2017-04-02', end = '2017-10-01')
end_time = proc.time()
total_time = (end_time - start_time) / 60 # 17 minutes
View(dat_mlb)
dat_mlb = inner_join(dat_mlb$pitch, dat_mlb$atbat, by = c("num", "url"))
View(dat_mlb)
