preds_2018 = data.frame()
for (team_index in 1:length(Results$Results)) {
df_results = Results$Results[[team_index]]
n = length(df_results$yhats)
mspe = rbind(mspe, calculate_mspe(yhat = df_results$yhats$Point.Forecast[-n], y = df_results$ys[-n]))
preds_2018 = rbind(preds_2018, df_results$yhats[n])
}
yhats
df_results$yhats
df_results$yhats[n]
# calcualte mspe
mspe = data.frame()
preds_2018 = data.frame()
for (team_index in 1:length(Results$Results)) {
df_results = Results$Results[[team_index]]
n = length(df_results$yhats)
mspe = rbind(mspe, calculate_mspe(yhat = df_results$yhats$Point.Forecast[-n], y = df_results$ys[-n]))
preds_2018 = rbind(preds_2018, df_results$yhats[n, ])
}
team_labels = names(Results$Results)
preds_2018
df_results$yhats
# calcualte mspe
mspe = data.frame()
preds_2018 = data.frame()
for (team_index in 1:length(Results$Results)) {
df_results = Results$Results[[team_index]]
n = length(df_results$yhats)
mspe = rbind(mspe, calculate_mspe(yhat = df_results$yhats$Point.Forecast[-n], y = df_results$ys[-n]))
preds_2018 = rbind(preds_2018, df_results$yhats[n, ])
}
preds_2018
mspe = cbind(team_labels, mspe)
preds_2018 = cbind(team_labels, preds_2018)
preds_2018
mspe
mspe = cbind(team_labels, 'mspe' = mspe)
preds_2018 = cbind(team_labels, preds_2018)
mspe
# calcualte mspe
mspe = data.frame()
preds_2018 = data.frame()
for (team_index in 1:length(Results$Results)) {
df_results = Results$Results[[team_index]]
n = length(df_results$yhats)
mspe = rbind(mspe, calculate_mspe(yhat = df_results$yhats$Point.Forecast[-n], y = df_results$ys[-n]))
preds_2018 = rbind(preds_2018, df_results$yhats[n, ])
}
team_labels = names(Results$Results)
mspe = cbind(team_labels, 'mspe' = mspe)
preds_2018 = cbind(team_labels, preds_2018)
mspe
preds_2018
colnames(mspe) = c('team', 'mspe')
wpct_to_wlwpct(.5)
wpct_to_wlwpct <- function(w_perc) {
GAMES = 162
W = round(GAMES * w_perc, digits = 0)
L = GAMES - W
return(c(W, L, w_perc))
}
wpct_to_wlwpct(.5)
wpct_to_wlwpct(preds_2018)
preds_2018
nrow(preds_2018)
wpct_to_wlwpct(preds_2018[team, col])
tema = 1
team = 1
team_df_this = data.frame()
for (col in c(4,2,3)) {
team_df_this = rbind(team_df_this, wpct_to_wlwpct(preds_2018[team, col]))
}
this_team_labels = rep(preds_2018[team, 1], 3)
team_df_this = cbind(this_team_labels, c('High 95', 'Yhat', 'Low 95'))
team_df_this
team_df_this = data.frame()
for (col in c(4,2,3)) {
team_df_this = rbind(team_df_this, wpct_to_wlwpct(preds_2018[team, col]))
}
this_team_labels = rep(preds_2018[team, 1], 3)
team_df_this = cbind(this_team_labels, c('High 95', 'Yhat', 'Low 95'), team_df_this)
team_df_this
colnames(team_df_this) = c('Team', 'Type', 'W', 'L', 'W%')
team_df_this
# we want to test how the model complexity and weight updates changes the mspe
for (start_year in c(1970, 1980, 1990, 2000)) {
for (complexity in list(c(2,2), c(3,3), c(4,4))) {
Results = after_weights(my_TS = AvailableTimeSeries, START_YEAR = start_year, model_complexity = complexity)
# calcualte mspe
mspe = data.frame()
preds_2018 = data.frame()
for (team_index in 1:length(Results$Results)) {
df_results = Results$Results[[team_index]]
n = length(df_results$yhats)
mspe = rbind(mspe, calculate_mspe(yhat = df_results$yhats$Point.Forecast[-n], y = df_results$ys[-n]))
preds_2018 = rbind(preds_2018, df_results$yhats[n, ])
}
team_labels = names(Results$Results)
mspe = cbind(team_labels, mspe)
preds_2018 = cbind(team_labels, preds_2018)
colnames(mspe) = c('team', 'mspe')
write_csv(mspe, paste('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity, '.csv'))
my_preds = data.frame()
for (team in 1:nrow(preds_2018)) {
team_df_this = data.frame()
for (col in c(4,2,3)) {
team_df_this = rbind(team_df_this, wpct_to_wlwpct(preds_2018[team, col]))
}
this_team_labels = rep(preds_2018[team, 1], 3)
team_df_this = cbind(this_team_labels, c('High 95', 'Yhat', 'Low 95'), team_df_this)
colnames(team_df_this) = c('Team', 'Type', 'W', 'L', 'W%')
my_preds = rbind(my_preds, team_df_this)
}
write_csv(my_preds, paste('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity, '.csv'))
}
}
mspe
write_csv(mspe, paste('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity, '.csv'))
write_csv(mspe, paste('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity, '.csv'))
write_csv(mspe, paste0('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity, '.csv'))
paste0('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity, '.csv')
complexity
write_csv(mspe, paste0('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity[1], complexity[2], '.csv'))
my_preds = data.frame()
for (team in 1:nrow(preds_2018)) {
team_df_this = data.frame()
for (col in c(4,2,3)) {
team_df_this = rbind(team_df_this, wpct_to_wlwpct(preds_2018[team, col]))
}
this_team_labels = rep(preds_2018[team, 1], 3)
team_df_this = cbind(this_team_labels, c('High 95', 'Yhat', 'Low 95'), team_df_this)
colnames(team_df_this) = c('Team', 'Type', 'W', 'L', 'W%')
my_preds = rbind(my_preds, team_df_this)
}
write_csv(my_preds, paste('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity[1], complexity[2], '.csv'))
write_csv(my_preds, paste0('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity[1], complexity[2], '.csv'))
write_csv(mspe, paste0('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity[1], complexity[2], '.csv'))
write_csv(my_preds, paste0('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/2018/after_', start_year, '_', complexity[1], complexity[2], '.csv'))
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/create_ts_for_each_team.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/UnivTimeSeries.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/MegaLearner.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/AFTER.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/after_weights.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/calculate_mspe.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/w_to_record.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
# we want to test how the model complexity and weight updates changes the mspe
cat("After Output", file = "after_weights.txt")
AvailableTimeSeries = list()
index = 1
names = c()
for (this_ts in 1:length(TeamTimeSeries)) { #  & names(TeamTimeSeries)[index] != 'San Francisco Giants'
if (length(TeamTimeSeries[[this_ts]]$yearID) == 117) {
AvailableTimeSeries[[index]] = TeamTimeSeries[[this_ts]]
names = c(names, names(TeamTimeSeries)[this_ts])
index = index + 1
}
}
names(AvailableTimeSeries) = names
after_weights = function(my_TS, START_YEAR = 1960, model_complexity = c(4, 4)) {
Results = list()
After = list()
P_o = model_complexity
for (this_ts in 1:length(my_TS)) {
# set this_team
this_team = names(my_TS)[this_ts]
# print team
cat('Team: ', this_team, '\n\n', file = "after_weights.txt", append = TRUE)
after = AFTER$new()
yhats_df = data.frame()
years = c()
ys = c()
df = my_TS[[this_ts]]
for (this_year in START_YEAR:2017) {
# get data thta we have avaiable
subset_ts = subset(df, yearID < this_year)
# build learners
mjr = MegaLearner$new(this_ts = subset_ts$win_pct)
mjr$make_models(P = P_o)
# update our weights
after$update_weights(mjr$get_models())
# get predictions
yhats = mjr$forecast_models(ahead = 1)
# linear algebra!!
yhat = t(after$get_weights()) %*% as.matrix(yhats) ## sick
if (this_year >= 2004) {
yhats_df = rbind(yhats_df, yhat)
years = c(years, this_year + 1)
ys = c(ys, df[df$yearID == this_year, 'win_pct'])
}
cat('Year: ', this_year, '\n', file = "after_weights.txt", append = TRUE)
cat('Weights: ', after$get_weights(), '\n\n', file = "after_weights.txt", append = TRUE)
}
Results[[this_team]]$yhats = yhats_df
Results[[this_team]]$ys = ys
Results[[this_team]]$years = years
After[[this_team]]$after = after
}
return(list('Results' = Results, 'After' = After))
}
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/create_ts_for_each_team.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/UnivTimeSeries.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/MegaLearner.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/AFTER.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/after_weights.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/calculate_mspe.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/w_to_record.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/create_ts_for_each_team.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/UnivTimeSeries.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/MegaLearner.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/AFTER.R')
str(TeamTimeSeries)
AvailableTimeSeries = list()
index = 1
names = c()
for (this_ts in 1:length(TeamTimeSeries)) { #  & names(TeamTimeSeries)[index] != 'San Francisco Giants'
if (length(TeamTimeSeries[[this_ts]]$yearID) >= 25) {
AvailableTimeSeries[[index]] = TeamTimeSeries[[this_ts]]
names = c(names, names(TeamTimeSeries)[this_ts])
index = index + 1
}
}
str(AvailableTimeSeries)
AvailableTimeSeries = list()
index = 1
names = c()
for (this_ts in 1:length(TeamTimeSeries)) { #  & names(TeamTimeSeries)[index] != 'San Francisco Giants'
if (length(TeamTimeSeries[[this_ts]]$yearID) > 25) {
AvailableTimeSeries[[index]] = TeamTimeSeries[[this_ts]]
names = c(names, names(TeamTimeSeries)[this_ts])
index = index + 1
}
}
str(AvailableTimeSeries)
AvailableTimeSeries = list()
index = 1
names = c()
for (this_ts in 1:length(TeamTimeSeries)) { #  & names(TeamTimeSeries)[index] != 'San Francisco Giants'
if (length(TeamTimeSeries[[this_ts]]$yearID) > 25) {
AvailableTimeSeries[[index]] = TeamTimeSeries[[this_ts]]
names = c(names, names(TeamTimeSeries)[this_ts])
index = index + 1
}
}
names(AvailableTimeSeries) = names
after_weights = function(my_TS, START_YEAR = 1960, model_complexity = c(4, 4)) {
Results = list()
After = list()
P_o = model_complexity
for (this_ts in 1:length(my_TS)) {
# set this_team
this_team = names(my_TS)[this_ts]
# print team
cat('Team: ', this_team, '\n\n', file = "after_weights.txt", append = TRUE)
after = AFTER$new()
yhats_df = data.frame()
years = c()
ys = c()
df = my_TS[[this_ts]]
for (this_year in START_YEAR:2017) {
# get data thta we have avaiable
subset_ts = subset(df, yearID < this_year)
# build learners
mjr = MegaLearner$new(this_ts = subset_ts$win_pct)
mjr$make_models(P = P_o)
# update our weights
after$update_weights(mjr$get_models())
# get predictions
yhats = mjr$forecast_models(ahead = 1)
# linear algebra!!
yhat = t(after$get_weights()) %*% as.matrix(yhats) ## sick
if (this_year >= 2004) {
yhats_df = rbind(yhats_df, yhat)
years = c(years, this_year + 1)
ys = c(ys, df[df$yearID == this_year, 'win_pct'])
}
cat('Year: ', this_year, '\n', file = "after_weights.txt", append = TRUE)
cat('Weights: ', after$get_weights(), '\n\n', file = "after_weights.txt", append = TRUE)
}
Results[[this_team]]$yhats = yhats_df
Results[[this_team]]$ys = ys
Results[[this_team]]$years = years
After[[this_team]]$after = after
}
return(list('Results' = Results, 'After' = After))
}
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/after_weights.R')
# we want to test how the model complexity and weight updates changes the mspe
cat("After Output ......................................................", '\n', file = "after_weights.txt")
# we want to test how the model complexity and weight updates changes the mspe
cat("After Output ......................................................", '\n', file = "after_weights.txt")
for (start_year in c(2000)) {
for (complexity in list(c(2,2), c(3,3), c(4,4))) {
cat(paste0('Start Year: ', start_year, '\n'), file = "after_weights.txt", append = TRUE)
cat(paste0('Complexity: ', complexity[1],'-', complexity[2], '\n'), file = "after_weights.txt", append = TRUE)
Results = after_weights(my_TS = AvailableTimeSeries, START_YEAR = start_year, model_complexity = complexity)
# calcualte mspe
mspe = data.frame()
preds_2018 = data.frame()
for (team_index in 1:length(Results$Results)) {
df_results = Results$Results[[team_index]]
n = length(df_results$yhats)
mspe = rbind(mspe, calculate_mspe(yhat = df_results$yhats$Point.Forecast[-n], y = df_results$ys[-n]))
preds_2018 = rbind(preds_2018, df_results$yhats[n, ])
}
team_labels = names(Results$Results)
mspe = cbind(team_labels, mspe)
preds_2018 = cbind(team_labels, preds_2018)
colnames(mspe) = c('team', 'mspe')
write_csv(mspe, paste0('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/after_', start_year, '_', complexity[1], complexity[2], '.csv'))
my_preds = data.frame()
for (team in 1:nrow(preds_2018)) {
team_df_this = data.frame()
for (col in c(4,2,3)) {
team_df_this = rbind(team_df_this, wpct_to_wlwpct(preds_2018[team, col]))
}
this_team_labels = rep(preds_2018[team, 1], 3)
team_df_this = cbind(this_team_labels, c('High 95', 'Yhat', 'Low 95'), team_df_this)
colnames(team_df_this) = c('Team', 'Type', 'W', 'L', 'W%')
my_preds = rbind(my_preds, team_df_this)
}
write_csv(my_preds, paste0('/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/2018/after_', start_year, '_', complexity[1], complexity[2], '.csv'))
}
}
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/calculate_mspe.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/w_to_record.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
str(TeamTimeSeries)
AvailableTimeSeries = list()
index = 1
names = c()
for (this_ts in 1:length(TeamTimeSeries)) { #  & names(TeamTimeSeries)[index] != 'San Francisco Giants'
if (length(TeamTimeSeries[[this_ts]]$yearID) > 19) {
AvailableTimeSeries[[index]] = TeamTimeSeries[[this_ts]]
names = c(names, names(TeamTimeSeries)[this_ts])
index = index + 1
}
}
names(AvailableTimeSeries) = names
after_weights = function(my_TS, START_YEAR = 1960, model_complexity = c(4, 4)) {
Results = list()
After = list()
P_o = model_complexity
for (this_ts in 1:length(my_TS)) {
# set this_team
this_team = names(my_TS)[this_ts]
# print team
cat('Team: ', this_team, '\n\n', file = "after_weights.txt", append = TRUE)
after = AFTER$new()
yhats_df = data.frame()
years = c()
ys = c()
df = my_TS[[this_ts]]
for (this_year in START_YEAR:2017) {
# get data thta we have avaiable
subset_ts = subset(df, yearID < this_year)
# build learners
mjr = MegaLearner$new(this_ts = subset_ts$win_pct)
mjr$make_models(P = P_o)
# update our weights
after$update_weights(mjr$get_models())
# get predictions
yhats = mjr$forecast_models(ahead = 1)
# linear algebra!!
yhat = t(after$get_weights()) %*% as.matrix(yhats) ## sick
if (this_year >= 2004) {
yhats_df = rbind(yhats_df, yhat)
years = c(years, this_year + 1)
ys = c(ys, df[df$yearID == this_year, 'win_pct'])
}
cat('Year: ', this_year, '\n', file = "after_weights.txt", append = TRUE)
cat('Weights: ', after$get_weights(), '\n\n', file = "after_weights.txt", append = TRUE)
}
Results[[this_team]]$yhats = yhats_df
Results[[this_team]]$ys = ys
Results[[this_team]]$years = years
After[[this_team]]$after = after
}
return(list('Results' = Results, 'After' = After))
}
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/AFTER.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
2018 - 2005
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/AFTER.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/after_weights.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
warnings()
citation('R6')
citation('lahman')
citation('layman')
citation('Lahman')
citation('tidyverse')
1 / (exp(-.05) + 1)
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/create_ts_for_each_team.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/UnivTimeSeries.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/MegaLearner.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/calculate_mspe.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/w_to_record.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/ProportionTrans.R')
# Data Structures
# mapping     1. yhat
#       1. ts 2. truth
#             3. year
# for each time series, main ts, do
# get the start year
# get the pythagoreans
# for each year in (start year to 2016) do
# fit model; # we train on a lagged pythagorean
# get and save predictions for main ts; # we regress on the most recent pythagoren
# get and save truths for main ts
library(R6)
# calculate MSPE
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/ProportionTrans.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/create_ts_for_each_team.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/UnivTimeSeries.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/calculate_mspe.R')
Results = list()
start_year = 2005
end_year = 2016
for (this_team in names(TeamTimeSeries)) {
this_ts = TeamTimeSeries[[this_team]]
this_layman = subset(df_layman, Team == this_team, select = c('yearID', 'pythagorean'))
# initialize data
y = c()
year = c()
yhat = c()
yhat_upper = c()
yhat_lower = c()
for (this_year in start_year:end_year) {
# use all data but limit its year to the current year
past_Y = subset(this_ts, yearID < this_year)
past_X = subset(this_layman, yearID < this_year - 1)
# lag Y , so Yt lines up with Xt-1 for regression
# so add 1 to X time and you get Yt = Xt = Xt-1+1
past_X$yearID = past_X$yearID + 1
past_D = merge(past_X, past_Y, by = 'yearID')
# give data
mjr = UnivTimeSeries$new(ts = past_D$win_pct, periods = 1)
# train data
mjr$xreg_fit(xreg = past_D$pythagorean)
# predict data
omg = mjr$predict_it(n_ahead = 1, xregs = past_X[past_X$yearID == this_year - 1, 'pythagorean']) # this works because of how we set up our time
# save data
y = c(y, this_ts[this_ts$yearID == this_year, 'win_pct'])
yhat = c(yhat, omg$Point.Forecast)
yhat_upper = c(yhat_upper, omg$Hi.95)
yhat_lower = c(yhat_lower, omg$Lo.95)
year = c(year, this_year)
}
Results[[this_team]]$yhat = yhat
Results[[this_team]]$yhat_upper = yhat_upper
Results[[this_team]]$yhat_lower = yhat_lower
Results[[this_team]]$y = y
Results[[this_team]]$year = year
cat('Team: ', this_team, '\n')
}
mspe = c()
for (team in names(Results)) {
mspe = c(mspe, calculate_mspe(yhat = Results[[team]]$yhat, y = Results[[team]]$y))
}
MSPE = data.frame('team' = names(Results), 'mspe' = mspe)
write_csv(MSPE, '/Users/DirtyMike/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Results/MSPE/pyrima_multivariate_mspe.csv')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Backtest/run_naive_majority_univariate_backtest.R')
warnings()
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/create_ts_for_each_team.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/UnivTimeSeries.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/MegaLearner.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/AFTER.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/after_weights.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/After/backtest_and_predictions.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/calculate_mspe.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Functions/w_to_record.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Objects/ProportionTrans.R')
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Predictions 2018/run_naive_weighted_majority_predictions.R')
naive_weighted_majority <- function(this_ts) {
yhats_everything = data.frame()
# it searches for p and q a level up. bad style but it's okay
for (p_o in 1:P_o) {
for (q_o in 1:Q_o) {
for (p_s in 1:P_s) {
for (q_s in 1:Q_s) {
# give data
mjr = UnivTimeSeries$new(ts = this_ts, periods = (p_s+q_s)/2)
# train
mjr$manual_fit(O = c(p_o, 0, q_o), S = c(p_s, 0, q_s))
# predict
omg = mjr$predict_it(n_ahead = 1)
yhats_everything = rbind(yhats_everything, omg)
}
}
}
}
return(yhats_everything)
}
source('~/Documents/Education/Academics/Rice University/Semesters/Spring 2018/SMGT 430/Project/Final Project/Game/Scripts/Predictions 2018/run_naive_weighted_majority_predictions.R')
.95 * .5 * .5
.6 * .5 * .327
.6 * .8 * .327
